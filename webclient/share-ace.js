// Generated by CoffeeScript 1.4.0
(function() {
  var $cursorDoc, Range, applyToShareJS, cursorColors, cursorInsertListener, getStartOffsetPosition, offsetToPos, randomUserId;

  Range = ace.require("ace/range").Range;

  getStartOffsetPosition = function(editorDoc, range) {
    var i, line, lines, offset, _i, _len;
    lines = editorDoc.getLines(0, range.start.row);
    offset = 0;
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      line = lines[i];
      offset += i < range.start.row ? line.length : range.start.column;
    }
    return offset + range.start.row;
  };

  offsetToPos = function(editorDoc, offset) {
    var line, lines, row, _i, _len;
    lines = editorDoc.getAllLines();
    row = 0;
    for (row = _i = 0, _len = lines.length; _i < _len; row = ++_i) {
      line = lines[row];
      if (offset <= line.length) {
        break;
      }
      offset -= lines[row].length + 1;
    }
    return {
      row: row,
      column: offset
    };
  };

  applyToShareJS = function(editorDoc, delta, doc) {
    var pos, text;
    pos = getStartOffsetPosition(editorDoc, delta.range);
    switch (delta.action) {
      case 'insertText':
        doc.insert(pos, delta.text);
        break;
      case 'removeText':
        doc.del(pos, delta.text.length);
        break;
      case 'insertLines':
        text = delta.lines.join('\n') + '\n';
        doc.insert(pos, text);
        break;
      case 'removeLines':
        text = delta.lines.join('\n') + '\n';
        doc.del(pos, text.length);
        break;
      default:
        throw new Error("unknown action: " + delta.action);
    }
  };

  randomUserId = function(length) {
    var chars, idx, name;
    if (!length) {
      length = 10;
    }
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-=";
    name = (function() {
      var _i, _results;
      _results = [];
      for (idx = _i = 0; 0 <= length ? _i < length : _i > length; idx = 0 <= length ? ++_i : --_i) {
        _results.push(chars[Math.floor(Math.random() * chars.length)]);
      }
      return _results;
    })();
    return name.join('');
  };

  cursorColors = ['yellow', 'red', 'blue'];

  $cursorDoc = {};

  cursorInsertListener = function(pos, text) {
    var colorClazz, editor, editorDoc, jsonData, markerId, position, range, remoteMarkers, rmUserId;
    $cursorDoc.jsonText = text;
    jsonData = eval('(' + text + ')');
    rmUserId = jsonData.u;
    position = jsonData.p;
    remoteMarkers = $cursorDoc.remoteMarkers;
    editor = $cursorDoc.editor;
    editorDoc = editor.getSession().getDocument();
    range = Range.fromPoints(offsetToPos(editorDoc, position), offsetToPos(editorDoc, position + 1));
    if (remoteMarkers.hasOwnProperty(rmUserId)) {
      colorClazz = $cursorDoc.remoteMarkers[rmUserId].clazz;
      markerId = $cursorDoc.remoteMarkers[rmUserId].id;
      editor.getSession().removeMarker(markerId);
      markerId = editor.getSession().addMarker(range, 'ace_marker ' + colorClazz, 'text', true);
      return $cursorDoc.remoteMarkers[rmUserId] = {
        'id': markerId,
        'clazz': colorClazz
      };
    } else {
      colorClazz = cursorColors[$cursorDoc.cursorColorIdx];
      $cursorDoc.cursorColorIdx++;
      markerId = editor.getSession().addMarker(range, 'ace_marker ' + colorClazz, 'text', true);
      return $cursorDoc.remoteMarkers[rmUserId] = {
        'id': markerId,
        'clazz': colorClazz
      };
    }
  };

  window.sharejs.extendDoc('attach_remotecursor', function(editor) {
    $cursorDoc = this;
    $cursorDoc.editor = editor;
    $cursorDoc.remoteMarkers = {};
    $cursorDoc.cursorColorIdx = 0;
    $cursorDoc.userid = document.location.hash.slice(1);
    $cursorDoc.jsonText = '';
    return $cursorDoc.on('insert', cursorInsertListener);
  });

  window.sharejs.extendDoc('attach_ace', function(editor, keepEditorContents) {
    var changeSelectionListener, check, doc, docListener, editorDoc, editorListener, suppress;
    if (!this.provides['text']) {
      throw new Error('Only text documents can be attached to ace');
    }
    doc = this;
    editorDoc = editor.getSession().getDocument();
    editorDoc.setNewLineMode('unix');
    check = function() {
      return window.setTimeout(function() {
        var editorText, otText;
        editorText = editorDoc.getValue();
        otText = doc.getText();
        if (editorText !== otText) {
          console.error("Text does not match!");
          console.error("editor: " + editorText);
          return console.error("ot:     " + otText);
        }
      }, 0);
    };
    if (keepEditorContents) {
      doc.del(0, doc.getText().length);
      doc.insert(0, editorDoc.getValue());
    } else {
      editorDoc.setValue(doc.getText());
    }
    check();
    suppress = false;
    editorListener = function(change) {
      if (suppress) {
        return;
      }
      applyToShareJS(editorDoc, change.data, doc);
      return check();
    };
    editorDoc.on('change', editorListener);
    docListener = function(op) {
      suppress = true;
      applyToDoc(editorDoc, op);
      suppress = false;
      return check();
    };
    changeSelectionListener = function(op) {
      var jsonStr, pos;
      pos = getStartOffsetPosition(editorDoc, editor.getSelectionRange());
      jsonStr = '{p:' + pos + ', u:' + '"' + $cursorDoc.userid + '"' + '}';
      op = [
        {
          i: jsonStr,
          p: 0
        }, {
          d: jsonStr,
          p: 0
        }
      ];
      return $cursorDoc.submitOp(op);
    };
    editor.on('changeSelection', changeSelectionListener);
    doc.on('insert', function(pos, text) {
      suppress = true;
      editorDoc.insert(offsetToPos(editorDoc, pos), text);
      cursorInsertListener(0, $cursorDoc.jsonText);
      suppress = false;
      return check();
    });
    doc.on('delete', function(pos, text) {
      var range;
      suppress = true;
      range = Range.fromPoints(offsetToPos(editorDoc, pos), offsetToPos(editorDoc, pos + text.length));
      editorDoc.remove(range);
      suppress = false;
      return check();
    });
    doc.detach_ace = function() {
      doc.removeListener('remoteop', docListener);
      editorDoc.removeListener('change', editorListener);
      return delete doc.detach_ace;
    };
  });

}).call(this);
